---
layout: post
title:  "Start refactoring from the deepest branch"
categories: refactoring
---
We see a large method.
Our mouth waters (or not).
We could nip at it from so many different places.
So, where do we start?

Have you been here?

"Where do we start?".
Sometimes the question wreaks confusion within our own minds.
Sometimes in an ensemble session, when everyone lands their focus on a different part of the code.
And that is not the worst of it. Sometimes we start refactor out a large blocks of code too early on, and end up with less than ideal abstractions.

So, again, where do we start?

Sandro Mancuso suggests we start with statements
nested most deeply within our code.

> Start refactoring from the deepest branch

The deepest branch gives us a small, localised problem to solve first.
There are fewer dependencies to deal with, like those pesky global variables.
Not only that,
it is likely that the deepest parts of the code will be expressing
details that don't belong in the method.
Details that will be violating Uncle Bob's
"One Level of Abstraction per Function" rule.

As lower levels of detail are refactored out,
patterns expressing the methods true intent should emerge.
Identifying those patterns will help us reach better abstractions.

Sandro demonstrates the technique in the following video:

<iframe width="560" height="315" src="https://www.youtube.com/embed/_NnElPO5BU0?start=1973" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>